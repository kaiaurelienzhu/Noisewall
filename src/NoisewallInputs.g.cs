// This code was generated by Hypar.
// Edits to this code will be overwritten the next time you run 'hypar init'.
// DO NOT EDIT THIS FILE.

using Elements;
using Elements.GeoJSON;
using Elements.Geometry;
using Elements.Geometry.Solids;
using Elements.Validators;
using Elements.Serialization.JSON;
using Hypar.Functions;
using Hypar.Functions.Execution;
using Hypar.Functions.Execution.AWS;
using System;
using System.Collections.Generic;
using System.Linq;
using Line = Elements.Geometry.Line;
using Polygon = Elements.Geometry.Polygon;

namespace Noisewall
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public  class NoisewallInputs : S3Args
    
    {
        [Newtonsoft.Json.JsonConstructor]
        
        public NoisewallInputs(double @noisewallSetoutCentres, double @toleranceGap, double @noisewallPanelHeight, double @noisewallPanelDepth, Polyline @setoutCurve, string bucketName, string uploadsBucket, Dictionary<string, string> modelInputKeys, string gltfKey, string elementsKey, string ifcKey):
        base(bucketName, uploadsBucket, modelInputKeys, gltfKey, elementsKey, ifcKey)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<NoisewallInputs>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @noisewallSetoutCentres, @toleranceGap, @noisewallPanelHeight, @noisewallPanelDepth, @setoutCurve});
            }
        
            this.NoisewallSetoutCentres = @noisewallSetoutCentres;
            this.ToleranceGap = @toleranceGap;
            this.NoisewallPanelHeight = @noisewallPanelHeight;
            this.NoisewallPanelDepth = @noisewallPanelDepth;
            this.SetoutCurve = @setoutCurve;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        /// <summary>The Length.</summary>
        [Newtonsoft.Json.JsonProperty("Noisewall Setout Centres", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0.1D, 10D)]
        public double NoisewallSetoutCentres { get; set; } = 1D;
    
        /// <summary>The Width.</summary>
        [Newtonsoft.Json.JsonProperty("Tolerance Gap", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0.05D, 1D)]
        public double ToleranceGap { get; set; }
    
        /// <summary>The height of the panel in m</summary>
        [Newtonsoft.Json.JsonProperty("Noisewall panel height", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0.1D, 10D)]
        public double NoisewallPanelHeight { get; set; } = 2D;
    
        /// <summary>The depth of panel</summary>
        [Newtonsoft.Json.JsonProperty("Noisewall panel depth", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0.1D, 0.5D)]
        public double NoisewallPanelDepth { get; set; } = 50D;
    
        /// <summary>Setout polyline curve which will be converted into a Bezier</summary>
        [Newtonsoft.Json.JsonProperty("Setout Curve", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Polyline SetoutCurve { get; set; }
    
    
    }
}